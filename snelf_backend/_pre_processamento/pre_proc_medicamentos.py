def run():
    # -*- coding: utf-8 -*-
    """pre_proc_medicamentos.ipynb

    Automatically generated by Colaboratory.

    Original file is located at
        https://colab.research.google.com/drive/1cj540Iyj-5KJYtrdPaR4W_b2nHH9G68C
    """

    import pandas as pd
    import seaborn as sns

    """### Loading"""

    data_path = '../datasets/medicamentos/'
    data_file = 'produtos_farmaceuticos.csv'

    cols = [81, 83]
    df = pd.read_csv('{}{}'.format(data_path, data_file), usecols=cols, dtype={0: str, 1: int})
    print(df.shape)
    df.head(2)

    """### Removendo registros que não possuem o atributo CLEAN"""

    # Removendo rows com EAN nulo
    df.dropna(subset=['CLEAN'], inplace=True)
    df.shape

    non_clean = ['N/I', '-1', '0']
    df = df[~df['CLEAN'].isin(non_clean)]
    df.shape

    # Removendo rows em que o EAN não é numérico
    df = df[df['CLEAN'].str.isdigit()]
    df.shape

    # Removendo rows com EANs inválidos (conforme regra do cálculo do dígito verificador)
    def is_ean_valid(row):
        return not sum(int(d) * i for d, i in zip(row['CLEAN'], [1, 3] * 7)) % 10

    indices = df.apply(is_ean_valid, axis=1)
    df = df[indices]
    df.shape

    """### Valores nulos"""

    df[df['DescricaoProduto'].isnull()]

    patt = '^NI\s|^NC\s'  # regex pattern
    df[df['DescricaoProduto'].str.contains(patt, regex=True)]

    """### UPPER"""

    df['DescricaoProduto'] = df['DescricaoProduto'].str.upper()

    """### Removendo duplicatas"""

    df.drop_duplicates(subset=['DescricaoProduto'], inplace=True)
    df.shape

    """### REMOVER LOTE E VALIDADE"""

    # Removendo informações de lote e validade
    pattern = ("[^A-Z0-9]"
               "("
               "LOTE|"
               "LO?T?:|"
               "LO?T(\.|\s)|"
               "LO?T?(\.|\:)\s*[0-9A-Z]+\s*VA?L?(\.|\:)|"
               "VA?L?(\.|\:)\s*[0-9\/A-Z]+\s*LO?T?(\.|\:)|"
               "LO?T?\(.+\)\s*VA?L?\(.+\)|"
               "VA?L?\(.+\)\s*LO?T?\(.+\)|"
               "LO?T?\s*[0-9]+\s*VA?L?\s*[0-9]+"
               ")")
    df['DescricaoProduto'] = df['DescricaoProduto'].str.split(pattern, 1).str[0].str.strip()

    """### Com a remoção do LOTE, novas duplicatas surgiram"""

    df.drop_duplicates(subset=['DescricaoProduto'], inplace=True)
    df.shape

    """### Estatísticas"""

    df.count()

    df['CLEAN'].unique().shape

    df_grouped = (df.groupby('CLEAN')
                  .count()
                  .sort_values('DescricaoProduto', ascending=False)
                  .reset_index())

    facet = sns.displot(data=df_grouped,
                        x='DescricaoProduto',
                        aspect=1.5)
    facet.set(xlabel="Distinct descriptions",
              ylabel="Number of EANs",
              title='Pharmaceutical')

    """### Gravando em arquivo"""

    data_file = 'medicamentos.csv'

    pd.DataFrame(df).to_csv('{}{}'.format(data_path, data_file),
                            sep=';',
                            header=['descricao', 'clean'],
                            index=False,
                            encoding='utf-8')

    """### Amostragem"""

    dfs = df.sample(100)
    print(dfs.count())

    data_file = 'medicamentos_sample.csv'

    dfs.to_csv('{}{}'.format(data_path, data_file),
               sep=';',
               header=['descricao', 'clean'],
               index=False,
               encoding='utf-8')